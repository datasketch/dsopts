[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Camila Achuri. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Achuri C (2024). dsopts: dsopts. R package version 0.0.0.9000.","code":"@Manual{,   title = {dsopts: dsopts},   author = {Camila Achuri},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"dsopts","dir":"","previous_headings":"","what":"dsopts ","title":"dsopts ","text":"goal dsopts provide set options used datasketch data visualization processing packages","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"dsopts ","text":"install development version dsopts GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"datasketch/dsopts\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"dsopts ","text":"see available options use: dsopts_available() get defaults override defaults override defaults list options","code":"library(dsopts) ## basic example code  # See all available options for a category dsopts_available(\"treemap\") #> [1] \"treemap_direction\"     \"treemap_layers\"        \"treemap_layers_params\" #> [4] \"treemap_layout\"  # See all available options for a category dsopts_available(\"zoom\") #> [1] \"map_zoom_delta\" \"map_zoom_snap\"  \"x_max\"          \"y_max\"          #> [5] \"zoom_level\"     \"zoom_max\"       \"zoom_min\"       \"zoom_show\"  # Can handle multiple categories  # This returns the options with both categories dsopts_available(c(\"map\", \"bubble\")) #> [1] \"bubble_max\"     \"bubble_min\"     \"bubble_opacity\"  # This returns the options with any of categories dsopts_available(c(\"map\", \"bubble\"), type = \"any_of\") #>  [1] \"border_opacity\"         \"bubble_max\"             \"bubble_min\"             #>  [4] \"bubble_opacity\"         \"map_bubble_cluster\"     \"map_graticule\"          #>  [7] \"map_graticule_interval\" \"map_name\"               \"map_name_layers_params\" #> [10] \"map_popup\"              \"map_projection_params\"  \"map_zoom_delta\"         #> [13] \"map_zoom_snap\"          \"zoom_level\" dsopts_default(categories = \"donut\") #> $donut_width #> [1] 2 #>  #> $sort #> [1] \"no\" dsopts_merge(donut_width = 1, categories = \"donut\") #> $donut_width #> [1] 1 #>  #> $sort #> [1] \"no\" opts <- list(     donut_width = 2   )   dsopts_merge(donut_width = 1, opts = opts, categories = \"donut\") #> $donut_width #> [1] 2 #>  #> $sort #> [1] \"no\""},{"path":"/reference/dsopts-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dsopts: dsopts — dsopts-package","title":"dsopts: dsopts — dsopts-package","text":"package (one paragraph).","code":""},{"path":"/reference/dsopts-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dsopts: dsopts — dsopts-package","text":"Maintainer: Camila Achuri first.last@example.com (ORCID)","code":""},{"path":"/reference/dsopts_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Available Options — dsopts_available","title":"Retrieve Available Options — dsopts_available","text":"function retrieves available options dsopts package, optionally filtered specified categories.","code":""},{"path":"/reference/dsopts_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Available Options — dsopts_available","text":"","code":"dsopts_available(categories = NULL, type = \"all_of\")"},{"path":"/reference/dsopts_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Available Options — dsopts_available","text":"categories vector character strings specifying categories options retrieve. NULL (default), categories considered. type character string specifying type filter apply categories specified. Default \"all_of\".","code":""},{"path":"/reference/dsopts_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Available Options — dsopts_available","text":"sorted vector names available options. categories specified, options categories returned.","code":""},{"path":"/reference/dsopts_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Available Options — dsopts_available","text":"","code":"if (FALSE) { # Assuming 'my_category' as a valid option category available_opts <- dsopts_available(categories = 'my_category') }"},{"path":"/reference/dsopts_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Default Options for a Specific Category — dsopts_default","title":"Retrieve Default Options for a Specific Category — dsopts_default","text":"function retrieves default options dsopts package specific category. category specified, returns default options categories.","code":""},{"path":"/reference/dsopts_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Default Options for a Specific Category — dsopts_default","text":"","code":"dsopts_default(categories = NULL, type = \"all_of\")"},{"path":"/reference/dsopts_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Default Options for a Specific Category — dsopts_default","text":"categories character string specifying category options retrieve. NULL (default), categories considered. type all_of any_of multiples categories provided","code":""},{"path":"/reference/dsopts_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Default Options for a Specific Category — dsopts_default","text":"named list default options. category specified, options category returned.","code":""},{"path":"/reference/dsopts_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Default Options for a Specific Category — dsopts_default","text":"","code":"if (FALSE) { # Assuming 'category' as a valid option category default_opts <- dsopts_default(category = 'my_category') }"},{"path":"/reference/dsopts_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Default and User-Defined Options — dsopts_merge","title":"Merge Default and User-Defined Options — dsopts_merge","text":"function merges user-defined options default options dsopts package. category specified, options category considered. User-defined options overwrite default ones.","code":""},{"path":"/reference/dsopts_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Default and User-Defined Options — dsopts_merge","text":"","code":"dsopts_merge(..., categories = NULL)"},{"path":"/reference/dsopts_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Default and User-Defined Options — dsopts_merge","text":"... User-defined options merge defaults. category character string specifying category options merge. NULL (default), categories considered.","code":""},{"path":"/reference/dsopts_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Default and User-Defined Options — dsopts_merge","text":"named list merged options. category specified, options category returned.","code":""},{"path":"/reference/dsopts_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Default and User-Defined Options — dsopts_merge","text":"","code":"if (FALSE) { # Assuming 'my_option' as a valid option name and 'my_category' as a valid option category merged_opts <- dsopts_merge(my_option = 'my_value', category = 'my_category') }"},{"path":"/reference/dsopt_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Default Option — dsopt_default","title":"Retrieve Default Option — dsopt_default","text":"function retrieves default value specified option dsopts package.","code":""},{"path":"/reference/dsopt_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Default Option — dsopt_default","text":"","code":"dsopt_default(opt)"},{"path":"/reference/dsopt_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Default Option — dsopt_default","text":"opt character string specifying name option whose default value retrieved.","code":""},{"path":"/reference/dsopt_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Default Option — dsopt_default","text":"default value specified option. option exist, returns NULL.","code":""},{"path":"/reference/dsopt_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Default Option — dsopt_default","text":"","code":"if (FALSE) { # Assuming 'my_option' as a valid option name default_opt <- dsopt_default(opt = 'my_option') }"}]
